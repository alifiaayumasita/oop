package net.kxyz;

  import java.awt.Dimension;
  import java.awt.GridLayout;
  import java.util.ArrayList;
  import javax.swing.JScrollPane;
  import javax.swing.JTable;
  import javax.swing.table.AbstractTableModel;

  /**
   *
        * @author kuman
   */
  public class Table extends javax.swing.JPanel {

 ReadXMLFile readXMLFile = new ReadXMLFile();
/**
 * Creates new form Table
 */
private boolean DEBUG = false;

 public Table() {

      super(new GridLayout(1, 0));
       System.out.println("SIEMANKO TABLE");
       ReadXMLFile.Read();
      ArrayList<Book> list = readXMLFile.getBook();

      list.add(new Book("3", "TYT", "AYUT", "231423"));
      list.get(0);
      JTable table = new JTable(new MyTableModel(list));
      table.setPreferredScrollableViewportSize(new Dimension(500, 70));
      table.setFillsViewportHeight(true);
       table.isCellEditable(0, 0);
      JScrollPane scrollPane = new JScrollPane(table);
      add(scrollPane);
 }

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
// <editor-fold defaultstate="collapsed" desc="Generated Code">
private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 300, Short.MAX_VALUE)
    );
}// </editor-fold>
// Variables declaration - do not modify
// End of variables declaration
  }


  class MyTableModel extends AbstractTableModel {
      private String[] columnNames = { "ID", "Title", "Author",
                "Year", "State" };
      ArrayList<Book> list = null;

      MyTableModel(ArrayList<Book> list) {
           this.list = list;
      }

      public int getColumnCount() {
           return columnNames.length;
      }

      public int getRowCount() {
           return list.size();
      }

      public String getColumnName(int col) {
           return columnNames[col];
      }

      public Object getValueAt(int row, int col) {

           Book object = list.get(row);

           switch (col) {
           case 0:
                return object.id;
           case 1:
                return object.title;
           case 2:
                return object.author;
           case 3:
                return object.year;
           case 4:
                return object.state;
           default:
                return "unknown";
           }
      }

@Override
      public Class getColumnClass(int c) {
           return getValueAt(0, c).getClass();
      }

       boolean[] canEdit = new boolean[]{
            false, false, true, false, true,
    };

@Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit[columnIndex];
    }

    public void setValueAt(Object value, int row, int col){



           switch (col) {
           case 0:
               // id not editable  list.get(row).setId((int)value);
           case 1:
                list.get(row).setTitle((String)value);
               break;
           case 2:
               list.get(row).setAuthor((String)value);
               break;
           case 3:
               list.get(row).setYear((String)value);
               break;
           case 4:
                list.get(row).setState(Boolean.valueOf((String)value));
               break;

           }
    fireTableCellUpdated(row, col);
}

 }